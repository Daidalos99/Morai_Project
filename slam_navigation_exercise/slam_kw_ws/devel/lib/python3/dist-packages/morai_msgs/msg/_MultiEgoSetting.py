# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/MultiEgoSetting.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MultiEgoSetting(genpy.Message):
  _md5sum = "5679503f20b811382c17da7f41e8d5d6"
  _type = "morai_msgs/MultiEgoSetting"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 number_of_ego_vehicle
int32 camera_index
int32[] ego_index
float64[] global_position_x
float64[] global_position_y
float64[] global_position_z
float32[] global_roll
float32[] global_pitch
float32[] global_yaw
float32[] velocity
int8[] gear
int8[] ctrl_mode
"""
  __slots__ = ['number_of_ego_vehicle','camera_index','ego_index','global_position_x','global_position_y','global_position_z','global_roll','global_pitch','global_yaw','velocity','gear','ctrl_mode']
  _slot_types = ['int32','int32','int32[]','float64[]','float64[]','float64[]','float32[]','float32[]','float32[]','float32[]','int8[]','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       number_of_ego_vehicle,camera_index,ego_index,global_position_x,global_position_y,global_position_z,global_roll,global_pitch,global_yaw,velocity,gear,ctrl_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultiEgoSetting, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.number_of_ego_vehicle is None:
        self.number_of_ego_vehicle = 0
      if self.camera_index is None:
        self.camera_index = 0
      if self.ego_index is None:
        self.ego_index = []
      if self.global_position_x is None:
        self.global_position_x = []
      if self.global_position_y is None:
        self.global_position_y = []
      if self.global_position_z is None:
        self.global_position_z = []
      if self.global_roll is None:
        self.global_roll = []
      if self.global_pitch is None:
        self.global_pitch = []
      if self.global_yaw is None:
        self.global_yaw = []
      if self.velocity is None:
        self.velocity = []
      if self.gear is None:
        self.gear = []
      if self.ctrl_mode is None:
        self.ctrl_mode = []
    else:
      self.number_of_ego_vehicle = 0
      self.camera_index = 0
      self.ego_index = []
      self.global_position_x = []
      self.global_position_y = []
      self.global_position_z = []
      self.global_roll = []
      self.global_pitch = []
      self.global_yaw = []
      self.velocity = []
      self.gear = []
      self.ctrl_mode = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.number_of_ego_vehicle, _x.camera_index))
      length = len(self.ego_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.ego_index))
      length = len(self.global_position_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.global_position_x))
      length = len(self.global_position_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.global_position_y))
      length = len(self.global_position_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.global_position_z))
      length = len(self.global_roll)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.global_roll))
      length = len(self.global_pitch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.global_pitch))
      length = len(self.global_yaw)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.global_yaw))
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.velocity))
      length = len(self.gear)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.gear))
      length = len(self.ctrl_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.ctrl_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.number_of_ego_vehicle, _x.camera_index,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ego_index = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_position_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_position_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_position_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_roll = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_pitch = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_yaw = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.gear = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ctrl_mode = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.number_of_ego_vehicle, _x.camera_index))
      length = len(self.ego_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ego_index.tostring())
      length = len(self.global_position_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.global_position_x.tostring())
      length = len(self.global_position_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.global_position_y.tostring())
      length = len(self.global_position_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.global_position_z.tostring())
      length = len(self.global_roll)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.global_roll.tostring())
      length = len(self.global_pitch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.global_pitch.tostring())
      length = len(self.global_yaw)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.global_yaw.tostring())
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.velocity.tostring())
      length = len(self.gear)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.gear.tostring())
      length = len(self.ctrl_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.ctrl_mode.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.number_of_ego_vehicle, _x.camera_index,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ego_index = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_position_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_position_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_position_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_roll = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_pitch = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.global_yaw = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.gear = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.ctrl_mode = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
