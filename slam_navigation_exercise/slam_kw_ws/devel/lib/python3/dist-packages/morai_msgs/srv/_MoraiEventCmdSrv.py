# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/MoraiEventCmdSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import morai_msgs.msg
import std_msgs.msg

class MoraiEventCmdSrvRequest(genpy.Message):
  _md5sum = "de5e52e7080efd2d8e185c1dcd1db112"
  _type = "morai_msgs/MoraiEventCmdSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """EventInfo request

================================================================================
MSG: morai_msgs/EventInfo
int8 option
int32 ctrl_mode
int32 gear
Lamps lamps
bool set_pause

================================================================================
MSG: morai_msgs/Lamps
Header header

int8 turnSignal
int8 emergencySignal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['request']
  _slot_types = ['morai_msgs/EventInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoraiEventCmdSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = morai_msgs.msg.EventInfo()
    else:
      self.request = morai_msgs.msg.EventInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b2i3I().pack(_x.request.option, _x.request.ctrl_mode, _x.request.gear, _x.request.lamps.header.seq, _x.request.lamps.header.stamp.secs, _x.request.lamps.header.stamp.nsecs))
      _x = self.request.lamps.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2bB().pack(_x.request.lamps.turnSignal, _x.request.lamps.emergencySignal, _x.request.set_pause))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = morai_msgs.msg.EventInfo()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.request.option, _x.request.ctrl_mode, _x.request.gear, _x.request.lamps.header.seq, _x.request.lamps.header.stamp.secs, _x.request.lamps.header.stamp.nsecs,) = _get_struct_b2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.lamps.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.lamps.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.request.lamps.turnSignal, _x.request.lamps.emergencySignal, _x.request.set_pause,) = _get_struct_2bB().unpack(str[start:end])
      self.request.set_pause = bool(self.request.set_pause)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b2i3I().pack(_x.request.option, _x.request.ctrl_mode, _x.request.gear, _x.request.lamps.header.seq, _x.request.lamps.header.stamp.secs, _x.request.lamps.header.stamp.nsecs))
      _x = self.request.lamps.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2bB().pack(_x.request.lamps.turnSignal, _x.request.lamps.emergencySignal, _x.request.set_pause))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = morai_msgs.msg.EventInfo()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.request.option, _x.request.ctrl_mode, _x.request.gear, _x.request.lamps.header.seq, _x.request.lamps.header.stamp.secs, _x.request.lamps.header.stamp.nsecs,) = _get_struct_b2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.lamps.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.lamps.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.request.lamps.turnSignal, _x.request.lamps.emergencySignal, _x.request.set_pause,) = _get_struct_2bB().unpack(str[start:end])
      self.request.set_pause = bool(self.request.set_pause)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2bB = None
def _get_struct_2bB():
    global _struct_2bB
    if _struct_2bB is None:
        _struct_2bB = struct.Struct("<2bB")
    return _struct_2bB
_struct_b2i3I = None
def _get_struct_b2i3I():
    global _struct_b2i3I
    if _struct_b2i3I is None:
        _struct_b2i3I = struct.Struct("<b2i3I")
    return _struct_b2i3I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/MoraiEventCmdSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import morai_msgs.msg
import std_msgs.msg

class MoraiEventCmdSrvResponse(genpy.Message):
  _md5sum = "9a4655da94bd0672ed74ad74e28d078b"
  _type = "morai_msgs/MoraiEventCmdSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """EventInfo response


================================================================================
MSG: morai_msgs/EventInfo
int8 option
int32 ctrl_mode
int32 gear
Lamps lamps
bool set_pause

================================================================================
MSG: morai_msgs/Lamps
Header header

int8 turnSignal
int8 emergencySignal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['response']
  _slot_types = ['morai_msgs/EventInfo']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoraiEventCmdSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = morai_msgs.msg.EventInfo()
    else:
      self.response = morai_msgs.msg.EventInfo()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b2i3I().pack(_x.response.option, _x.response.ctrl_mode, _x.response.gear, _x.response.lamps.header.seq, _x.response.lamps.header.stamp.secs, _x.response.lamps.header.stamp.nsecs))
      _x = self.response.lamps.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2bB().pack(_x.response.lamps.turnSignal, _x.response.lamps.emergencySignal, _x.response.set_pause))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.response is None:
        self.response = morai_msgs.msg.EventInfo()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.response.option, _x.response.ctrl_mode, _x.response.gear, _x.response.lamps.header.seq, _x.response.lamps.header.stamp.secs, _x.response.lamps.header.stamp.nsecs,) = _get_struct_b2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.lamps.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.lamps.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.response.lamps.turnSignal, _x.response.lamps.emergencySignal, _x.response.set_pause,) = _get_struct_2bB().unpack(str[start:end])
      self.response.set_pause = bool(self.response.set_pause)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b2i3I().pack(_x.response.option, _x.response.ctrl_mode, _x.response.gear, _x.response.lamps.header.seq, _x.response.lamps.header.stamp.secs, _x.response.lamps.header.stamp.nsecs))
      _x = self.response.lamps.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2bB().pack(_x.response.lamps.turnSignal, _x.response.lamps.emergencySignal, _x.response.set_pause))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.response is None:
        self.response = morai_msgs.msg.EventInfo()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.response.option, _x.response.ctrl_mode, _x.response.gear, _x.response.lamps.header.seq, _x.response.lamps.header.stamp.secs, _x.response.lamps.header.stamp.nsecs,) = _get_struct_b2i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.lamps.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.lamps.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.response.lamps.turnSignal, _x.response.lamps.emergencySignal, _x.response.set_pause,) = _get_struct_2bB().unpack(str[start:end])
      self.response.set_pause = bool(self.response.set_pause)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2bB = None
def _get_struct_2bB():
    global _struct_2bB
    if _struct_2bB is None:
        _struct_2bB = struct.Struct("<2bB")
    return _struct_2bB
_struct_b2i3I = None
def _get_struct_b2i3I():
    global _struct_b2i3I
    if _struct_b2i3I is None:
        _struct_b2i3I = struct.Struct("<b2i3I")
    return _struct_b2i3I
class MoraiEventCmdSrv(object):
  _type          = 'morai_msgs/MoraiEventCmdSrv'
  _md5sum = '12515282709d0774401eb06049aedb82'
  _request_class  = MoraiEventCmdSrvRequest
  _response_class = MoraiEventCmdSrvResponse
