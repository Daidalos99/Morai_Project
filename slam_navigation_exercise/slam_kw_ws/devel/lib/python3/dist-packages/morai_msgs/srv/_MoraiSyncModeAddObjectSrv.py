# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/MoraiSyncModeAddObjectSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import morai_msgs.msg

class MoraiSyncModeAddObjectSrvRequest(genpy.Message):
  _md5sum = "eb4f1edddd253d5c956e50cd7a1565cd"
  _type = "morai_msgs/MoraiSyncModeAddObjectSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SyncModeAddObject request

================================================================================
MSG: morai_msgs/SyncModeAddObject
string name
geometry_msgs/Vector3 position
float64 heading
uint64 frame

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['request']
  _slot_types = ['morai_msgs/SyncModeAddObject']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoraiSyncModeAddObjectSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = morai_msgs.msg.SyncModeAddObject()
    else:
      self.request = morai_msgs.msg.SyncModeAddObject()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.request.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4dQ().pack(_x.request.position.x, _x.request.position.y, _x.request.position.z, _x.request.heading, _x.request.frame))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = morai_msgs.msg.SyncModeAddObject()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.name = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.request.position.x, _x.request.position.y, _x.request.position.z, _x.request.heading, _x.request.frame,) = _get_struct_4dQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.request.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4dQ().pack(_x.request.position.x, _x.request.position.y, _x.request.position.z, _x.request.heading, _x.request.frame))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = morai_msgs.msg.SyncModeAddObject()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.name = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.request.position.x, _x.request.position.y, _x.request.position.z, _x.request.heading, _x.request.frame,) = _get_struct_4dQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dQ = None
def _get_struct_4dQ():
    global _struct_4dQ
    if _struct_4dQ is None:
        _struct_4dQ = struct.Struct("<4dQ")
    return _struct_4dQ
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/MoraiSyncModeAddObjectSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import morai_msgs.msg

class MoraiSyncModeAddObjectSrvResponse(genpy.Message):
  _md5sum = "4039c80fa74cc3be5f583706bf97e6b0"
  _type = "morai_msgs/MoraiSyncModeAddObjectSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SyncModeResultResponse response


================================================================================
MSG: morai_msgs/SyncModeResultResponse
bool result
"""
  __slots__ = ['response']
  _slot_types = ['morai_msgs/SyncModeResultResponse']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoraiSyncModeAddObjectSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = morai_msgs.msg.SyncModeResultResponse()
    else:
      self.response = morai_msgs.msg.SyncModeResultResponse()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.response.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.response is None:
        self.response = morai_msgs.msg.SyncModeResultResponse()
      end = 0
      start = end
      end += 1
      (self.response.result,) = _get_struct_B().unpack(str[start:end])
      self.response.result = bool(self.response.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.response.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.response is None:
        self.response = morai_msgs.msg.SyncModeResultResponse()
      end = 0
      start = end
      end += 1
      (self.response.result,) = _get_struct_B().unpack(str[start:end])
      self.response.result = bool(self.response.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class MoraiSyncModeAddObjectSrv(object):
  _type          = 'morai_msgs/MoraiSyncModeAddObjectSrv'
  _md5sum = 'c1fef4ccdc9874029ce22686c7e98f83'
  _request_class  = MoraiSyncModeAddObjectSrvRequest
  _response_class = MoraiSyncModeAddObjectSrvResponse
