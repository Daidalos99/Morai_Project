// Generated by gencpp from file morai_msgs/WaitForTickResponse.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_WAITFORTICKRESPONSE_H
#define MORAI_MSGS_MESSAGE_WAITFORTICKRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <morai_msgs/EgoVehicleStatus.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct WaitForTickResponse_
{
  typedef WaitForTickResponse_<ContainerAllocator> Type;

  WaitForTickResponse_()
    : tick_status(false)
    , pause_status(false)
    , frame(0)
    , vehicle_status()
    , time()  {
    }
  WaitForTickResponse_(const ContainerAllocator& _alloc)
    : tick_status(false)
    , pause_status(false)
    , frame(0)
    , vehicle_status(_alloc)
    , time(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _tick_status_type;
  _tick_status_type tick_status;

   typedef uint8_t _pause_status_type;
  _pause_status_type pause_status;

   typedef uint64_t _frame_type;
  _frame_type frame;

   typedef  ::morai_msgs::EgoVehicleStatus_<ContainerAllocator>  _vehicle_status_type;
  _vehicle_status_type vehicle_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WaitForTickResponse_

typedef ::morai_msgs::WaitForTickResponse_<std::allocator<void> > WaitForTickResponse;

typedef boost::shared_ptr< ::morai_msgs::WaitForTickResponse > WaitForTickResponsePtr;
typedef boost::shared_ptr< ::morai_msgs::WaitForTickResponse const> WaitForTickResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::WaitForTickResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::WaitForTickResponse_<ContainerAllocator1> & lhs, const ::morai_msgs::WaitForTickResponse_<ContainerAllocator2> & rhs)
{
  return lhs.tick_status == rhs.tick_status &&
    lhs.pause_status == rhs.pause_status &&
    lhs.frame == rhs.frame &&
    lhs.vehicle_status == rhs.vehicle_status &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::WaitForTickResponse_<ContainerAllocator1> & lhs, const ::morai_msgs::WaitForTickResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c80ca1ddc5a285c8be87fef734111b0";
  }

  static const char* value(const ::morai_msgs::WaitForTickResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c80ca1ddc5a285cULL;
  static const uint64_t static_value2 = 0x8be87fef734111b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/WaitForTickResponse";
  }

  static const char* value(const ::morai_msgs::WaitForTickResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool tick_status\n"
"bool pause_status\n"
"uint64 frame\n"
"\n"
"EgoVehicleStatus vehicle_status\n"
"string time\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/EgoVehicleStatus\n"
"Header header\n"
"int32 unique_id\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 position\n"
"geometry_msgs/Vector3 velocity\n"
"\n"
"float64 heading\n"
"float32 accel\n"
"float32 brake\n"
"float32 wheel_angle\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::WaitForTickResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tick_status);
      stream.next(m.pause_status);
      stream.next(m.frame);
      stream.next(m.vehicle_status);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaitForTickResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::WaitForTickResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::WaitForTickResponse_<ContainerAllocator>& v)
  {
    s << indent << "tick_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tick_status);
    s << indent << "pause_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pause_status);
    s << indent << "frame: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame);
    s << indent << "vehicle_status: ";
    s << std::endl;
    Printer< ::morai_msgs::EgoVehicleStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_status);
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_WAITFORTICKRESPONSE_H
