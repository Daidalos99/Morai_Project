// Generated by gencpp from file morai_msgs/MoraiSimProcStatus.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MORAISIMPROCSTATUS_H
#define MORAI_MSGS_MESSAGE_MORAISIMPROCSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct MoraiSimProcStatus_
{
  typedef MoraiSimProcStatus_<ContainerAllocator> Type;

  MoraiSimProcStatus_()
    : header()
    , latest_command_time()
    , command_result(0)
    , current_mode(0)
    , current_status(0)  {
    }
  MoraiSimProcStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latest_command_time()
    , command_result(0)
    , current_mode(0)
    , current_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _latest_command_time_type;
  _latest_command_time_type latest_command_time;

   typedef uint8_t _command_result_type;
  _command_result_type command_result;

   typedef uint8_t _current_mode_type;
  _current_mode_type current_mode;

   typedef uint8_t _current_status_type;
  _current_status_type current_status;





  typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MoraiSimProcStatus_

typedef ::morai_msgs::MoraiSimProcStatus_<std::allocator<void> > MoraiSimProcStatus;

typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcStatus > MoraiSimProcStatusPtr;
typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcStatus const> MoraiSimProcStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.latest_command_time == rhs.latest_command_time &&
    lhs.command_result == rhs.command_result &&
    lhs.current_mode == rhs.current_mode &&
    lhs.current_status == rhs.current_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "533bc73de5b186ff7b72acd2d1130c9f";
  }

  static const char* value(const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x533bc73de5b186ffULL;
  static const uint64_t static_value2 = 0x7b72acd2d1130c9fULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/MoraiSimProcStatus";
  }

  static const char* value(const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"time latest_command_time\n"
"uint8 command_result\n"
"uint8 current_mode\n"
"uint8 current_status\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latest_command_time);
      stream.next(m.command_result);
      stream.next(m.current_mode);
      stream.next(m.current_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoraiSimProcStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::MoraiSimProcStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latest_command_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.latest_command_time);
    s << indent << "command_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_result);
    s << indent << "current_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_mode);
    s << indent << "current_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MORAISIMPROCSTATUS_H
