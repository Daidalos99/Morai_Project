// Generated by gencpp from file morai_msgs/MultiEgoSetting.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MULTIEGOSETTING_H
#define MORAI_MSGS_MESSAGE_MULTIEGOSETTING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct MultiEgoSetting_
{
  typedef MultiEgoSetting_<ContainerAllocator> Type;

  MultiEgoSetting_()
    : number_of_ego_vehicle(0)
    , camera_index(0)
    , ego_index()
    , global_position_x()
    , global_position_y()
    , global_position_z()
    , global_roll()
    , global_pitch()
    , global_yaw()
    , velocity()
    , gear()
    , ctrl_mode()  {
    }
  MultiEgoSetting_(const ContainerAllocator& _alloc)
    : number_of_ego_vehicle(0)
    , camera_index(0)
    , ego_index(_alloc)
    , global_position_x(_alloc)
    , global_position_y(_alloc)
    , global_position_z(_alloc)
    , global_roll(_alloc)
    , global_pitch(_alloc)
    , global_yaw(_alloc)
    , velocity(_alloc)
    , gear(_alloc)
    , ctrl_mode(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _number_of_ego_vehicle_type;
  _number_of_ego_vehicle_type number_of_ego_vehicle;

   typedef int32_t _camera_index_type;
  _camera_index_type camera_index;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _ego_index_type;
  _ego_index_type ego_index;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _global_position_x_type;
  _global_position_x_type global_position_x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _global_position_y_type;
  _global_position_y_type global_position_y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _global_position_z_type;
  _global_position_z_type global_position_z;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _global_roll_type;
  _global_roll_type global_roll;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _global_pitch_type;
  _global_pitch_type global_pitch;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _global_yaw_type;
  _global_yaw_type global_yaw;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _velocity_type;
  _velocity_type velocity;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _gear_type;
  _gear_type gear;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;





  typedef boost::shared_ptr< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> const> ConstPtr;

}; // struct MultiEgoSetting_

typedef ::morai_msgs::MultiEgoSetting_<std::allocator<void> > MultiEgoSetting;

typedef boost::shared_ptr< ::morai_msgs::MultiEgoSetting > MultiEgoSettingPtr;
typedef boost::shared_ptr< ::morai_msgs::MultiEgoSetting const> MultiEgoSettingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::MultiEgoSetting_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::MultiEgoSetting_<ContainerAllocator1> & lhs, const ::morai_msgs::MultiEgoSetting_<ContainerAllocator2> & rhs)
{
  return lhs.number_of_ego_vehicle == rhs.number_of_ego_vehicle &&
    lhs.camera_index == rhs.camera_index &&
    lhs.ego_index == rhs.ego_index &&
    lhs.global_position_x == rhs.global_position_x &&
    lhs.global_position_y == rhs.global_position_y &&
    lhs.global_position_z == rhs.global_position_z &&
    lhs.global_roll == rhs.global_roll &&
    lhs.global_pitch == rhs.global_pitch &&
    lhs.global_yaw == rhs.global_yaw &&
    lhs.velocity == rhs.velocity &&
    lhs.gear == rhs.gear &&
    lhs.ctrl_mode == rhs.ctrl_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::MultiEgoSetting_<ContainerAllocator1> & lhs, const ::morai_msgs::MultiEgoSetting_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5679503f20b811382c17da7f41e8d5d6";
  }

  static const char* value(const ::morai_msgs::MultiEgoSetting_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5679503f20b81138ULL;
  static const uint64_t static_value2 = 0x2c17da7f41e8d5d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/MultiEgoSetting";
  }

  static const char* value(const ::morai_msgs::MultiEgoSetting_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 number_of_ego_vehicle\n"
"int32 camera_index\n"
"int32[] ego_index\n"
"float64[] global_position_x\n"
"float64[] global_position_y\n"
"float64[] global_position_z\n"
"float32[] global_roll\n"
"float32[] global_pitch\n"
"float32[] global_yaw\n"
"float32[] velocity\n"
"int8[] gear\n"
"int8[] ctrl_mode\n"
;
  }

  static const char* value(const ::morai_msgs::MultiEgoSetting_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_of_ego_vehicle);
      stream.next(m.camera_index);
      stream.next(m.ego_index);
      stream.next(m.global_position_x);
      stream.next(m.global_position_y);
      stream.next(m.global_position_z);
      stream.next(m.global_roll);
      stream.next(m.global_pitch);
      stream.next(m.global_yaw);
      stream.next(m.velocity);
      stream.next(m.gear);
      stream.next(m.ctrl_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiEgoSetting_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::MultiEgoSetting_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::MultiEgoSetting_<ContainerAllocator>& v)
  {
    s << indent << "number_of_ego_vehicle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_ego_vehicle);
    s << indent << "camera_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera_index);
    s << indent << "ego_index[]" << std::endl;
    for (size_t i = 0; i < v.ego_index.size(); ++i)
    {
      s << indent << "  ego_index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ego_index[i]);
    }
    s << indent << "global_position_x[]" << std::endl;
    for (size_t i = 0; i < v.global_position_x.size(); ++i)
    {
      s << indent << "  global_position_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.global_position_x[i]);
    }
    s << indent << "global_position_y[]" << std::endl;
    for (size_t i = 0; i < v.global_position_y.size(); ++i)
    {
      s << indent << "  global_position_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.global_position_y[i]);
    }
    s << indent << "global_position_z[]" << std::endl;
    for (size_t i = 0; i < v.global_position_z.size(); ++i)
    {
      s << indent << "  global_position_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.global_position_z[i]);
    }
    s << indent << "global_roll[]" << std::endl;
    for (size_t i = 0; i < v.global_roll.size(); ++i)
    {
      s << indent << "  global_roll[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.global_roll[i]);
    }
    s << indent << "global_pitch[]" << std::endl;
    for (size_t i = 0; i < v.global_pitch.size(); ++i)
    {
      s << indent << "  global_pitch[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.global_pitch[i]);
    }
    s << indent << "global_yaw[]" << std::endl;
    for (size_t i = 0; i < v.global_yaw.size(); ++i)
    {
      s << indent << "  global_yaw[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.global_yaw[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "gear[]" << std::endl;
    for (size_t i = 0; i < v.gear.size(); ++i)
    {
      s << indent << "  gear[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.gear[i]);
    }
    s << indent << "ctrl_mode[]" << std::endl;
    for (size_t i = 0; i < v.ctrl_mode.size(); ++i)
    {
      s << indent << "  ctrl_mode[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.ctrl_mode[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MULTIEGOSETTING_H
