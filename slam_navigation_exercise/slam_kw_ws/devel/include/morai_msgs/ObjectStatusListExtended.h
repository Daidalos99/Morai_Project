// Generated by gencpp from file morai_msgs/ObjectStatusListExtended.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_OBJECTSTATUSLISTEXTENDED_H
#define MORAI_MSGS_MESSAGE_OBJECTSTATUSLISTEXTENDED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <morai_msgs/ObjectStatusExtended.h>
#include <morai_msgs/ObjectStatusExtended.h>
#include <morai_msgs/ObjectStatusExtended.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct ObjectStatusListExtended_
{
  typedef ObjectStatusListExtended_<ContainerAllocator> Type;

  ObjectStatusListExtended_()
    : header()
    , num_of_npcs(0)
    , num_of_pedestrian(0)
    , num_of_obstacle(0)
    , npc_list()
    , pedestrian_list()
    , obstacle_list()  {
    }
  ObjectStatusListExtended_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_of_npcs(0)
    , num_of_pedestrian(0)
    , num_of_obstacle(0)
    , npc_list(_alloc)
    , pedestrian_list(_alloc)
    , obstacle_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _num_of_npcs_type;
  _num_of_npcs_type num_of_npcs;

   typedef int32_t _num_of_pedestrian_type;
  _num_of_pedestrian_type num_of_pedestrian;

   typedef int32_t _num_of_obstacle_type;
  _num_of_obstacle_type num_of_obstacle;

   typedef std::vector< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> >> _npc_list_type;
  _npc_list_type npc_list;

   typedef std::vector< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> >> _pedestrian_list_type;
  _pedestrian_list_type pedestrian_list;

   typedef std::vector< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> >> _obstacle_list_type;
  _obstacle_list_type obstacle_list;





  typedef boost::shared_ptr< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectStatusListExtended_

typedef ::morai_msgs::ObjectStatusListExtended_<std::allocator<void> > ObjectStatusListExtended;

typedef boost::shared_ptr< ::morai_msgs::ObjectStatusListExtended > ObjectStatusListExtendedPtr;
typedef boost::shared_ptr< ::morai_msgs::ObjectStatusListExtended const> ObjectStatusListExtendedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator1> & lhs, const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_of_npcs == rhs.num_of_npcs &&
    lhs.num_of_pedestrian == rhs.num_of_pedestrian &&
    lhs.num_of_obstacle == rhs.num_of_obstacle &&
    lhs.npc_list == rhs.npc_list &&
    lhs.pedestrian_list == rhs.pedestrian_list &&
    lhs.obstacle_list == rhs.obstacle_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator1> & lhs, const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c74a5b5ee3ba424f5d334390beb3ffc3";
  }

  static const char* value(const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc74a5b5ee3ba424fULL;
  static const uint64_t static_value2 = 0x5d334390beb3ffc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/ObjectStatusListExtended";
  }

  static const char* value(const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32 num_of_npcs\n"
"int32 num_of_pedestrian\n"
"int32 num_of_obstacle\n"
"\n"
"ObjectStatusExtended[] npc_list\n"
"ObjectStatusExtended[] pedestrian_list\n"
"ObjectStatusExtended[] obstacle_list\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: morai_msgs/ObjectStatusExtended\n"
"int32 unique_id\n"
"int32 type\n"
"string name\n"
"float64 heading\n"
"\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 size\n"
"geometry_msgs/Vector3 position\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"int32 turn_signal\n"
"string[] global_path_info\n"
"int32 lane_departure\n"
"float32 distance_left_lane\n"
"float32 distance_right_lane\n"
"float32 object_yaw_rate\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_of_npcs);
      stream.next(m.num_of_pedestrian);
      stream.next(m.num_of_obstacle);
      stream.next(m.npc_list);
      stream.next(m.pedestrian_list);
      stream.next(m.obstacle_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectStatusListExtended_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::ObjectStatusListExtended_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_of_npcs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_of_npcs);
    s << indent << "num_of_pedestrian: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_of_pedestrian);
    s << indent << "num_of_obstacle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_of_obstacle);
    s << indent << "npc_list[]" << std::endl;
    for (size_t i = 0; i < v.npc_list.size(); ++i)
    {
      s << indent << "  npc_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> >::stream(s, indent + "    ", v.npc_list[i]);
    }
    s << indent << "pedestrian_list[]" << std::endl;
    for (size_t i = 0; i < v.pedestrian_list.size(); ++i)
    {
      s << indent << "  pedestrian_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> >::stream(s, indent + "    ", v.pedestrian_list[i]);
    }
    s << indent << "obstacle_list[]" << std::endl;
    for (size_t i = 0; i < v.obstacle_list.size(); ++i)
    {
      s << indent << "  obstacle_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::morai_msgs::ObjectStatusExtended_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_OBJECTSTATUSLISTEXTENDED_H
