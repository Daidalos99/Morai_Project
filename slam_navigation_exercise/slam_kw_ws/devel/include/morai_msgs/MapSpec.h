// Generated by gencpp from file morai_msgs/MapSpec.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MAPSPEC_H
#define MORAI_MSGS_MESSAGE_MAPSPEC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct MapSpec_
{
  typedef MapSpec_<ContainerAllocator> Type;

  MapSpec_()
    : plane_coordinate_system(0)
    , utm_num(0)
    , utm_offset()
    , ellipse()
    , central_latitude(0.0)
    , central_meridian(0.0)
    , scale_factor(0.0)
    , false_easting(0.0)
    , false_northing(0.0)  {
    }
  MapSpec_(const ContainerAllocator& _alloc)
    : plane_coordinate_system(0)
    , utm_num(0)
    , utm_offset(_alloc)
    , ellipse(_alloc)
    , central_latitude(0.0)
    , central_meridian(0.0)
    , scale_factor(0.0)
    , false_easting(0.0)
    , false_northing(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _plane_coordinate_system_type;
  _plane_coordinate_system_type plane_coordinate_system;

   typedef int32_t _utm_num_type;
  _utm_num_type utm_num;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _utm_offset_type;
  _utm_offset_type utm_offset;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ellipse_type;
  _ellipse_type ellipse;

   typedef double _central_latitude_type;
  _central_latitude_type central_latitude;

   typedef double _central_meridian_type;
  _central_meridian_type central_meridian;

   typedef double _scale_factor_type;
  _scale_factor_type scale_factor;

   typedef double _false_easting_type;
  _false_easting_type false_easting;

   typedef double _false_northing_type;
  _false_northing_type false_northing;





  typedef boost::shared_ptr< ::morai_msgs::MapSpec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::MapSpec_<ContainerAllocator> const> ConstPtr;

}; // struct MapSpec_

typedef ::morai_msgs::MapSpec_<std::allocator<void> > MapSpec;

typedef boost::shared_ptr< ::morai_msgs::MapSpec > MapSpecPtr;
typedef boost::shared_ptr< ::morai_msgs::MapSpec const> MapSpecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::MapSpec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::MapSpec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::MapSpec_<ContainerAllocator1> & lhs, const ::morai_msgs::MapSpec_<ContainerAllocator2> & rhs)
{
  return lhs.plane_coordinate_system == rhs.plane_coordinate_system &&
    lhs.utm_num == rhs.utm_num &&
    lhs.utm_offset == rhs.utm_offset &&
    lhs.ellipse == rhs.ellipse &&
    lhs.central_latitude == rhs.central_latitude &&
    lhs.central_meridian == rhs.central_meridian &&
    lhs.scale_factor == rhs.scale_factor &&
    lhs.false_easting == rhs.false_easting &&
    lhs.false_northing == rhs.false_northing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::MapSpec_<ContainerAllocator1> & lhs, const ::morai_msgs::MapSpec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MapSpec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MapSpec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MapSpec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MapSpec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MapSpec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MapSpec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::MapSpec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff26999f16fc5ab8e3788072433240e9";
  }

  static const char* value(const ::morai_msgs::MapSpec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff26999f16fc5ab8ULL;
  static const uint64_t static_value2 = 0xe3788072433240e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::MapSpec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/MapSpec";
  }

  static const char* value(const ::morai_msgs::MapSpec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::MapSpec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 plane_coordinate_system\n"
"int32 utm_num\n"
"\n"
"geometry_msgs/Vector3 utm_offset\n"
"\n"
"string ellipse\n"
"float64 central_latitude\n"
"float64 central_meridian\n"
"float64 scale_factor\n"
"float64 false_easting\n"
"float64 false_northing\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::MapSpec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::MapSpec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plane_coordinate_system);
      stream.next(m.utm_num);
      stream.next(m.utm_offset);
      stream.next(m.ellipse);
      stream.next(m.central_latitude);
      stream.next(m.central_meridian);
      stream.next(m.scale_factor);
      stream.next(m.false_easting);
      stream.next(m.false_northing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapSpec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::MapSpec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::MapSpec_<ContainerAllocator>& v)
  {
    s << indent << "plane_coordinate_system: ";
    Printer<int32_t>::stream(s, indent + "  ", v.plane_coordinate_system);
    s << indent << "utm_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.utm_num);
    s << indent << "utm_offset: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.utm_offset);
    s << indent << "ellipse: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ellipse);
    s << indent << "central_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.central_latitude);
    s << indent << "central_meridian: ";
    Printer<double>::stream(s, indent + "  ", v.central_meridian);
    s << indent << "scale_factor: ";
    Printer<double>::stream(s, indent + "  ", v.scale_factor);
    s << indent << "false_easting: ";
    Printer<double>::stream(s, indent + "  ", v.false_easting);
    s << indent << "false_northing: ";
    Printer<double>::stream(s, indent + "  ", v.false_northing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MAPSPEC_H
