// Generated by gencpp from file morai_msgs/GPSMessage.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_GPSMESSAGE_H
#define MORAI_MSGS_MESSAGE_GPSMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct GPSMessage_
{
  typedef GPSMessage_<ContainerAllocator> Type;

  GPSMessage_()
    : header()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , eastOffset(0.0)
    , northOffset(0.0)
    , status(0)  {
    }
  GPSMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , eastOffset(0.0)
    , northOffset(0.0)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _eastOffset_type;
  _eastOffset_type eastOffset;

   typedef double _northOffset_type;
  _northOffset_type northOffset;

   typedef int16_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::morai_msgs::GPSMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::GPSMessage_<ContainerAllocator> const> ConstPtr;

}; // struct GPSMessage_

typedef ::morai_msgs::GPSMessage_<std::allocator<void> > GPSMessage;

typedef boost::shared_ptr< ::morai_msgs::GPSMessage > GPSMessagePtr;
typedef boost::shared_ptr< ::morai_msgs::GPSMessage const> GPSMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::GPSMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::GPSMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::GPSMessage_<ContainerAllocator1> & lhs, const ::morai_msgs::GPSMessage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.eastOffset == rhs.eastOffset &&
    lhs.northOffset == rhs.northOffset &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::GPSMessage_<ContainerAllocator1> & lhs, const ::morai_msgs::GPSMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GPSMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GPSMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GPSMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GPSMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GPSMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GPSMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::GPSMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ab9511aaf9d33b721630ddffc1f7c5f";
  }

  static const char* value(const ::morai_msgs::GPSMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ab9511aaf9d33b7ULL;
  static const uint64_t static_value2 = 0x21630ddffc1f7c5fULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::GPSMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/GPSMessage";
  }

  static const char* value(const ::morai_msgs::GPSMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::GPSMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
"float64 eastOffset\n"
"float64 northOffset\n"
"int16 status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::morai_msgs::GPSMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::GPSMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.eastOffset);
      stream.next(m.northOffset);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPSMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::GPSMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::GPSMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "eastOffset: ";
    Printer<double>::stream(s, indent + "  ", v.eastOffset);
    s << indent << "northOffset: ";
    Printer<double>::stream(s, indent + "  ", v.northOffset);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_GPSMESSAGE_H
