// Generated by gencpp from file morai_msgs/MoraiSimProcHandle.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MORAISIMPROCHANDLE_H
#define MORAI_MSGS_MESSAGE_MORAISIMPROCHANDLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct MoraiSimProcHandle_
{
  typedef MoraiSimProcHandle_<ContainerAllocator> Type;

  MoraiSimProcHandle_()
    : sim_process_status(0)
    , replay_option(0)
    , rosbag_file_name()
    , replay_target_option(0)
    , replay_speed(0)
    , start_time(0)  {
    }
  MoraiSimProcHandle_(const ContainerAllocator& _alloc)
    : sim_process_status(0)
    , replay_option(0)
    , rosbag_file_name(_alloc)
    , replay_target_option(0)
    , replay_speed(0)
    , start_time(0)  {
  (void)_alloc;
    }



   typedef uint8_t _sim_process_status_type;
  _sim_process_status_type sim_process_status;

   typedef int16_t _replay_option_type;
  _replay_option_type replay_option;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rosbag_file_name_type;
  _rosbag_file_name_type rosbag_file_name;

   typedef int16_t _replay_target_option_type;
  _replay_target_option_type replay_target_option;

   typedef int32_t _replay_speed_type;
  _replay_speed_type replay_speed;

   typedef int32_t _start_time_type;
  _start_time_type start_time;





  typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> const> ConstPtr;

}; // struct MoraiSimProcHandle_

typedef ::morai_msgs::MoraiSimProcHandle_<std::allocator<void> > MoraiSimProcHandle;

typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcHandle > MoraiSimProcHandlePtr;
typedef boost::shared_ptr< ::morai_msgs::MoraiSimProcHandle const> MoraiSimProcHandleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator1> & lhs, const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator2> & rhs)
{
  return lhs.sim_process_status == rhs.sim_process_status &&
    lhs.replay_option == rhs.replay_option &&
    lhs.rosbag_file_name == rhs.rosbag_file_name &&
    lhs.replay_target_option == rhs.replay_target_option &&
    lhs.replay_speed == rhs.replay_speed &&
    lhs.start_time == rhs.start_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator1> & lhs, const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c9175c85f14149cc98c9509a8191c60";
  }

  static const char* value(const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c9175c85f14149cULL;
  static const uint64_t static_value2 = 0xc98c9509a8191c60ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/MoraiSimProcHandle";
  }

  static const char* value(const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 sim_process_status\n"
"\n"
"int16 replay_option\n"
"string rosbag_file_name\n"
"int16 replay_target_option\n"
"\n"
"int32 replay_speed\n"
"int32 start_time\n"
;
  }

  static const char* value(const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sim_process_status);
      stream.next(m.replay_option);
      stream.next(m.rosbag_file_name);
      stream.next(m.replay_target_option);
      stream.next(m.replay_speed);
      stream.next(m.start_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoraiSimProcHandle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::MoraiSimProcHandle_<ContainerAllocator>& v)
  {
    s << indent << "sim_process_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sim_process_status);
    s << indent << "replay_option: ";
    Printer<int16_t>::stream(s, indent + "  ", v.replay_option);
    s << indent << "rosbag_file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rosbag_file_name);
    s << indent << "replay_target_option: ";
    Printer<int16_t>::stream(s, indent + "  ", v.replay_target_option);
    s << indent << "replay_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.replay_speed);
    s << indent << "start_time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MORAISIMPROCHANDLE_H
