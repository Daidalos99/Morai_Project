// Generated by gencpp from file morai_msgs/ERP42Info.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_ERP42INFO_H
#define MORAI_MSGS_MESSAGE_ERP42INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct ERP42Info_
{
  typedef ERP42Info_<ContainerAllocator> Type;

  ERP42Info_()
    : longlCmdType(0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , velocity(0.0)
    , steering(0.0)  {
    }
  ERP42Info_(const ContainerAllocator& _alloc)
    : longlCmdType(0)
    , position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , velocity(0.0)
    , steering(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _longlCmdType_type;
  _longlCmdType_type longlCmdType;

   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;

   typedef float _position_z_type;
  _position_z_type position_z;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _steering_type;
  _steering_type steering;





  typedef boost::shared_ptr< ::morai_msgs::ERP42Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::ERP42Info_<ContainerAllocator> const> ConstPtr;

}; // struct ERP42Info_

typedef ::morai_msgs::ERP42Info_<std::allocator<void> > ERP42Info;

typedef boost::shared_ptr< ::morai_msgs::ERP42Info > ERP42InfoPtr;
typedef boost::shared_ptr< ::morai_msgs::ERP42Info const> ERP42InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::ERP42Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::ERP42Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::ERP42Info_<ContainerAllocator1> & lhs, const ::morai_msgs::ERP42Info_<ContainerAllocator2> & rhs)
{
  return lhs.longlCmdType == rhs.longlCmdType &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.velocity == rhs.velocity &&
    lhs.steering == rhs.steering;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::ERP42Info_<ContainerAllocator1> & lhs, const ::morai_msgs::ERP42Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ERP42Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ERP42Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ERP42Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ERP42Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ERP42Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ERP42Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::ERP42Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "447921c8aaf0c348263b1dd340abd2b4";
  }

  static const char* value(const ::morai_msgs::ERP42Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x447921c8aaf0c348ULL;
  static const uint64_t static_value2 = 0x263b1dd340abd2b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::ERP42Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/ERP42Info";
  }

  static const char* value(const ::morai_msgs::ERP42Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::ERP42Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 longlCmdType\n"
"\n"
"float32 position_x\n"
"float32 position_y\n"
"float32 position_z\n"
"\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"float32 velocity\n"
"float32 steering\n"
"\n"
;
  }

  static const char* value(const ::morai_msgs::ERP42Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::ERP42Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.longlCmdType);
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.velocity);
      stream.next(m.steering);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ERP42Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::ERP42Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::ERP42Info_<ContainerAllocator>& v)
  {
    s << indent << "longlCmdType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.longlCmdType);
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<float>::stream(s, indent + "  ", v.position_z);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_ERP42INFO_H
