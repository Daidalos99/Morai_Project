// Generated by gencpp from file morai_msgs/ObjectStatus.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_OBJECTSTATUS_H
#define MORAI_MSGS_MESSAGE_OBJECTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct ObjectStatus_
{
  typedef ObjectStatus_<ContainerAllocator> Type;

  ObjectStatus_()
    : unique_id(0)
    , type(0)
    , name()
    , heading(0.0)
    , velocity()
    , acceleration()
    , size()
    , position()  {
    }
  ObjectStatus_(const ContainerAllocator& _alloc)
    : unique_id(0)
    , type(0)
    , name(_alloc)
    , heading(0.0)
    , velocity(_alloc)
    , acceleration(_alloc)
    , size(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _unique_id_type;
  _unique_id_type unique_id;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef double _heading_type;
  _heading_type heading;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_type;
  _size_type size;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::morai_msgs::ObjectStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::ObjectStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectStatus_

typedef ::morai_msgs::ObjectStatus_<std::allocator<void> > ObjectStatus;

typedef boost::shared_ptr< ::morai_msgs::ObjectStatus > ObjectStatusPtr;
typedef boost::shared_ptr< ::morai_msgs::ObjectStatus const> ObjectStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::ObjectStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::ObjectStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::ObjectStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::ObjectStatus_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.type == rhs.type &&
    lhs.name == rhs.name &&
    lhs.heading == rhs.heading &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.size == rhs.size &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::ObjectStatus_<ContainerAllocator1> & lhs, const ::morai_msgs::ObjectStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ObjectStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ObjectStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ObjectStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c26de946466c1a04669a97165d87ed0";
  }

  static const char* value(const ::morai_msgs::ObjectStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c26de946466c1a0ULL;
  static const uint64_t static_value2 = 0x4669a97165d87ed0ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/ObjectStatus";
  }

  static const char* value(const ::morai_msgs::ObjectStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 unique_id\n"
"int32 type\n"
"string name\n"
"float64 heading\n"
"\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 size\n"
"geometry_msgs/Vector3 position\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::ObjectStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.type);
      stream.next(m.name);
      stream.next(m.heading);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.size);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::ObjectStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::ObjectStatus_<ContainerAllocator>& v)
  {
    s << indent << "unique_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.unique_id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "size: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_OBJECTSTATUS_H
