// Generated by gencpp from file morai_msgs/RadarDetection.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_RADARDETECTION_H
#define MORAI_MSGS_MESSAGE_RADARDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct RadarDetection_
{
  typedef RadarDetection_<ContainerAllocator> Type;

  RadarDetection_()
    : detection_id(0)
    , position()
    , azimuth(0.0)
    , rangerate(0.0)
    , amplitude(0.0)  {
    }
  RadarDetection_(const ContainerAllocator& _alloc)
    : detection_id(0)
    , position(_alloc)
    , azimuth(0.0)
    , rangerate(0.0)
    , amplitude(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _detection_id_type;
  _detection_id_type detection_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef float _rangerate_type;
  _rangerate_type rangerate;

   typedef float _amplitude_type;
  _amplitude_type amplitude;





  typedef boost::shared_ptr< ::morai_msgs::RadarDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::RadarDetection_<ContainerAllocator> const> ConstPtr;

}; // struct RadarDetection_

typedef ::morai_msgs::RadarDetection_<std::allocator<void> > RadarDetection;

typedef boost::shared_ptr< ::morai_msgs::RadarDetection > RadarDetectionPtr;
typedef boost::shared_ptr< ::morai_msgs::RadarDetection const> RadarDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::RadarDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::RadarDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::RadarDetection_<ContainerAllocator1> & lhs, const ::morai_msgs::RadarDetection_<ContainerAllocator2> & rhs)
{
  return lhs.detection_id == rhs.detection_id &&
    lhs.position == rhs.position &&
    lhs.azimuth == rhs.azimuth &&
    lhs.rangerate == rhs.rangerate &&
    lhs.amplitude == rhs.amplitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::RadarDetection_<ContainerAllocator1> & lhs, const ::morai_msgs::RadarDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::RadarDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::RadarDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::RadarDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::RadarDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::RadarDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::RadarDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::RadarDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a793982ef59c29909256d522d48cad28";
  }

  static const char* value(const ::morai_msgs::RadarDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa793982ef59c2990ULL;
  static const uint64_t static_value2 = 0x9256d522d48cad28ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::RadarDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/RadarDetection";
  }

  static const char* value(const ::morai_msgs::RadarDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::RadarDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message relates only to FMCW radar.  \n"
"# All variables below are relative to the radar's frame of reference.\n"
"# This message is not meant to be used alone but as part of a stamped or array message.\n"
"\n"
"# Object classifications (Additional vendor-specific classifications are permitted starting from 32000 eg. Car)\n"
"\n"
"uint16 detection_id                       # Index of each radar detection point\n"
"geometry_msgs/Point position              # x, y, z position of each radar detection point\n"
"\n"
"float32 azimuth							  # azimuth angle of each radar detection point in Degree\n"
"float32 rangerate						  # relative velocity of the radar detected target w.r.t radial direction\n"
"float32 amplitude						  # amplitude of the reflected signal of the radar detected target(rcs)\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::RadarDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::RadarDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detection_id);
      stream.next(m.position);
      stream.next(m.azimuth);
      stream.next(m.rangerate);
      stream.next(m.amplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::RadarDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::RadarDetection_<ContainerAllocator>& v)
  {
    s << indent << "detection_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.detection_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "rangerate: ";
    Printer<float>::stream(s, indent + "  ", v.rangerate);
    s << indent << "amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.amplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_RADARDETECTION_H
