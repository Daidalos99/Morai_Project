// Generated by gencpp from file morai_msgs/NpcGhostInfo.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_NPCGHOSTINFO_H
#define MORAI_MSGS_MESSAGE_NPCGHOSTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct NpcGhostInfo_
{
  typedef NpcGhostInfo_<ContainerAllocator> Type;

  NpcGhostInfo_()
    : unique_id(0)
    , name()
    , position()
    , rpy()  {
    }
  NpcGhostInfo_(const ContainerAllocator& _alloc)
    : unique_id(0)
    , name(_alloc)
    , position(_alloc)
    , rpy(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _unique_id_type;
  _unique_id_type unique_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpy_type;
  _rpy_type rpy;





  typedef boost::shared_ptr< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> const> ConstPtr;

}; // struct NpcGhostInfo_

typedef ::morai_msgs::NpcGhostInfo_<std::allocator<void> > NpcGhostInfo;

typedef boost::shared_ptr< ::morai_msgs::NpcGhostInfo > NpcGhostInfoPtr;
typedef boost::shared_ptr< ::morai_msgs::NpcGhostInfo const> NpcGhostInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::NpcGhostInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::NpcGhostInfo_<ContainerAllocator1> & lhs, const ::morai_msgs::NpcGhostInfo_<ContainerAllocator2> & rhs)
{
  return lhs.unique_id == rhs.unique_id &&
    lhs.name == rhs.name &&
    lhs.position == rhs.position &&
    lhs.rpy == rhs.rpy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::NpcGhostInfo_<ContainerAllocator1> & lhs, const ::morai_msgs::NpcGhostInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3290c3d676866a67769dc5339863ab69";
  }

  static const char* value(const ::morai_msgs::NpcGhostInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3290c3d676866a67ULL;
  static const uint64_t static_value2 = 0x769dc5339863ab69ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/NpcGhostInfo";
  }

  static const char* value(const ::morai_msgs::NpcGhostInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 unique_id\n"
"string name\n"
"\n"
"geometry_msgs/Vector3 position\n"
"geometry_msgs/Vector3 rpy\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::NpcGhostInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unique_id);
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.rpy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NpcGhostInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::NpcGhostInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::NpcGhostInfo_<ContainerAllocator>& v)
  {
    s << indent << "unique_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.unique_id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "rpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_NPCGHOSTINFO_H
